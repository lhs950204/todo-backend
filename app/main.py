# generated by fastapi-codegen:
#   filename:  api.yaml
#   timestamp: 2025-01-12T04:41:14+00:00

from __future__ import annotations

from typing import Optional, Union

from fastapi import FastAPI, Path, Query, UploadFile

from .models import (
    CreateGoalBodyDto,
    CreateNoteBodyDto,
    CreateTodoBodyDto,
    ErrorResponsePayload,
    FieldTeamIdAuthLoginPostResponse,
    FieldTeamIdAuthTokensPostResponse,
    FieldTeamIdFilesPostResponse,
    FieldTeamIdGoalsGetResponse,
    FieldTeamIdGoalsGoalIdGetResponse,
    FieldTeamIdGoalsGoalIdPatchResponse,
    FieldTeamIdGoalsPostResponse,
    FieldTeamIdNotesGetResponse,
    FieldTeamIdNotesNoteIdGetResponse,
    FieldTeamIdNotesNoteIdPatchResponse,
    FieldTeamIdNotesPostResponse,
    FieldTeamIdTodosGetResponse,
    FieldTeamIdTodosProgressGetResponse,
    LoginBodyDto,
    SortOrder,
    TodoResponseDto,
    UpdateGoalBodyDto,
    UpdateNoteBodyDto,
    UpdateTodoBodyDto,
    UserCreateRequstDto,
    UserServiceResponseDto,
)

app = FastAPI(
    title="server",
    version="1.0.0",
    description="codeit-slidtodo",
    contact={},
    servers=[{"url": "/"}],
)


@app.post(
    "/{teamId}/auth/login",
    response_model=None,
    responses={
        "201": {"model": FieldTeamIdAuthLoginPostResponse},
        "400": {"model": ErrorResponsePayload},
        "404": {"model": ErrorResponsePayload},
    },
    tags=["Auth"],
)
def login(
    team_id: str = Path(..., alias="teamId"), body: LoginBodyDto = ...
) -> Optional[Union[FieldTeamIdAuthLoginPostResponse, ErrorResponsePayload]]:
    """
    로그인
    """
    pass


@app.post(
    "/{teamId}/auth/tokens",
    response_model=None,
    responses={
        "201": {"model": FieldTeamIdAuthTokensPostResponse},
        "401": {"model": ErrorResponsePayload},
    },
    tags=["Auth"],
)
def refresh(
    team_id: str = Path(..., alias="teamId"),
) -> Optional[Union[FieldTeamIdAuthTokensPostResponse, ErrorResponsePayload]]:
    """
    토큰 재발급
    """
    pass


@app.post(
    "/{teamId}/files",
    response_model=FieldTeamIdFilesPostResponse,
    responses={
        "400": {"model": ErrorResponsePayload},
        "401": {"model": ErrorResponsePayload},
    },
    tags=["File"],
)
def upload_file(
    team_id: str = Path(..., alias="teamId"), file: UploadFile = ...
) -> Union[FieldTeamIdFilesPostResponse, ErrorResponsePayload]:
    """
    파일 업로드
    """
    pass


@app.get(
    "/{teamId}/goals",
    response_model=FieldTeamIdGoalsGetResponse,
    responses={"401": {"model": ErrorResponsePayload}},
    tags=["Goal"],
)
def find(
    team_id: str = Path(..., alias="teamId"),
    cursor: Optional[float] = None,
    size: Optional[float] = 20,
    # sort_order: Optional[SortOrder3] = Query('oldest', alias='sortOrder'),
) -> Union[FieldTeamIdGoalsGetResponse, ErrorResponsePayload]:
    """
    내 목표 리스트 조회
    """
    pass


@app.post(
    "/{teamId}/goals",
    response_model=None,
    responses={
        "201": {"model": FieldTeamIdGoalsPostResponse},
        "401": {"model": ErrorResponsePayload},
    },
    tags=["Goal"],
)
def create(
    team_id: str = Path(..., alias="teamId"), body: CreateGoalBodyDto = ...
) -> Optional[Union[FieldTeamIdGoalsPostResponse, ErrorResponsePayload]]:
    """
    내 목표 생성
    """
    pass


@app.get(
    "/{teamId}/goals/{goalId}",
    response_model=FieldTeamIdGoalsGoalIdGetResponse,
    responses={
        "401": {"model": ErrorResponsePayload},
        "404": {"model": ErrorResponsePayload},
    },
    tags=["Goal"],
)
def get(
    team_id: str = Path(..., alias="teamId"), goal_id: float = Path(..., alias="goalId")
) -> Union[FieldTeamIdGoalsGoalIdGetResponse, ErrorResponsePayload]:
    """
    내 목표 조회
    """
    pass


@app.patch(
    "/{teamId}/goals/{goalId}",
    response_model=FieldTeamIdGoalsGoalIdPatchResponse,
    responses={
        "401": {"model": ErrorResponsePayload},
        "403": {"model": ErrorResponsePayload},
        "404": {"model": ErrorResponsePayload},
    },
    tags=["Goal"],
)
def update(
    team_id: str = Path(..., alias="teamId"),
    goal_id: float = Path(..., alias="goalId"),
    body: UpdateGoalBodyDto = ...,
) -> Union[FieldTeamIdGoalsGoalIdPatchResponse, ErrorResponsePayload]:
    """
    내 목표 수정
    """
    pass


@app.delete(
    "/{teamId}/goals/{goalId}",
    response_model=None,
    responses={
        "401": {"model": ErrorResponsePayload},
        "403": {"model": ErrorResponsePayload},
        "404": {"model": ErrorResponsePayload},
    },
    tags=["Goal"],
)
def delete(
    team_id: str = Path(..., alias="teamId"), goal_id: float = Path(..., alias="goalId")
) -> Optional[ErrorResponsePayload]:
    """
    내 목표 삭제
    """
    pass


@app.get(
    "/{teamId}/notes",
    response_model=FieldTeamIdNotesGetResponse,
    responses={
        "400": {"model": ErrorResponsePayload},
        "401": {"model": ErrorResponsePayload},
    },
    tags=["Note"],
)
def find(
    team_id: str = Path(..., alias="teamId"),
    goal_id: Optional[float] = Query(None, alias="goalId"),
    cursor: Optional[float] = None,
    size: Optional[float] = 20,
) -> Union[FieldTeamIdNotesGetResponse, ErrorResponsePayload]:
    """
    노트 리스트 조회
    """
    pass


@app.post(
    "/{teamId}/notes",
    response_model=None,
    responses={
        "201": {"model": FieldTeamIdNotesPostResponse},
        "400": {"model": ErrorResponsePayload},
        "401": {"model": ErrorResponsePayload},
        "403": {"model": ErrorResponsePayload},
        "409": {"model": ErrorResponsePayload},
    },
    tags=["Note"],
)
def post(
    team_id: str = Path(..., alias="teamId"), body: CreateNoteBodyDto = ...
) -> Optional[Union[FieldTeamIdNotesPostResponse, ErrorResponsePayload]]:
    """
    노트 생성
    """
    pass


@app.get(
    "/{teamId}/notes/{noteId}",
    response_model=FieldTeamIdNotesNoteIdGetResponse,
    responses={
        "400": {"model": ErrorResponsePayload},
        "401": {"model": ErrorResponsePayload},
        "403": {"model": ErrorResponsePayload},
        "404": {"model": ErrorResponsePayload},
    },
    tags=["Note"],
)
def get(
    team_id: str = Path(..., alias="teamId"), note_id: float = Path(..., alias="noteId")
) -> Union[FieldTeamIdNotesNoteIdGetResponse, ErrorResponsePayload]:
    """
    단일 노트 조회
    """
    pass


@app.patch(
    "/{teamId}/notes/{noteId}",
    response_model=FieldTeamIdNotesNoteIdPatchResponse,
    responses={
        "400": {"model": ErrorResponsePayload},
        "401": {"model": ErrorResponsePayload},
        "403": {"model": ErrorResponsePayload},
        "404": {"model": ErrorResponsePayload},
    },
    tags=["Note"],
)
def patch(
    team_id: str = Path(..., alias="teamId"),
    note_id: float = Path(..., alias="noteId"),
    body: UpdateNoteBodyDto = ...,
) -> Union[FieldTeamIdNotesNoteIdPatchResponse, ErrorResponsePayload]:
    """
    노트 수정
    """
    pass


@app.delete(
    "/{teamId}/notes/{noteId}",
    response_model=None,
    responses={
        "401": {"model": ErrorResponsePayload},
        "403": {"model": ErrorResponsePayload},
        "404": {"model": ErrorResponsePayload},
    },
    tags=["Note"],
)
def delete(
    team_id: str = Path(..., alias="teamId"), note_id: float = Path(..., alias="noteId")
) -> Optional[ErrorResponsePayload]:
    """
    노트 삭제
    """
    pass


@app.get(
    "/{teamId}/todos",
    response_model=FieldTeamIdTodosGetResponse,
    responses={
        "400": {"model": ErrorResponsePayload},
        "401": {"model": ErrorResponsePayload},
    },
    tags=["Todo"],
)
def find(
    team_id: str = Path(..., alias="teamId"),
    goal_id: Optional[float] = Query(None, alias="goalId"),
    done: Optional[bool] = None,
    cursor: Optional[float] = None,
    size: Optional[float] = 20,
) -> Union[FieldTeamIdTodosGetResponse, ErrorResponsePayload]:
    """
    할 일 리스트 조회
    """
    pass


@app.post(
    "/{teamId}/todos",
    response_model=None,
    responses={
        "201": {"model": TodoResponseDto},
        "400": {"model": ErrorResponsePayload},
        "401": {"model": ErrorResponsePayload},
    },
    tags=["Todo"],
)
def create(
    team_id: str = Path(..., alias="teamId"), body: CreateTodoBodyDto = ...
) -> Optional[Union[TodoResponseDto, ErrorResponsePayload]]:
    """
    할 일 생성
    """
    pass


@app.get(
    "/{teamId}/todos/progress",
    response_model=FieldTeamIdTodosProgressGetResponse,
    responses={
        "400": {"model": ErrorResponsePayload},
        "401": {"model": ErrorResponsePayload},
    },
    tags=["Todo"],
)
def get_progress(
    team_id: str = Path(..., alias="teamId"),
    goal_id: Optional[float] = Query(None, alias="goalId"),
) -> Union[FieldTeamIdTodosProgressGetResponse, ErrorResponsePayload]:
    """
    할 일 진행률 조회
    """
    pass


@app.get(
    "/{teamId}/todos/{todoId}",
    response_model=TodoResponseDto,
    responses={
        "401": {"model": ErrorResponsePayload},
        "403": {"model": ErrorResponsePayload},
        "404": {"model": ErrorResponsePayload},
    },
    tags=["Todo"],
)
def get_by_id(
    team_id: str = Path(..., alias="teamId"), todo_id: float = Path(..., alias="todoId")
) -> Union[TodoResponseDto, ErrorResponsePayload]:
    """
    단일 할 일 조회
    """
    pass


@app.patch(
    "/{teamId}/todos/{todoId}",
    response_model=TodoResponseDto,
    responses={
        "400": {"model": ErrorResponsePayload},
        "401": {"model": ErrorResponsePayload},
        "403": {"model": ErrorResponsePayload},
        "404": {"model": ErrorResponsePayload},
    },
    tags=["Todo"],
)
def update(
    team_id: str = Path(..., alias="teamId"),
    todo_id: float = Path(..., alias="todoId"),
    body: UpdateTodoBodyDto = ...,
) -> Union[TodoResponseDto, ErrorResponsePayload]:
    """
    할 일 수정
    """
    pass


@app.delete(
    "/{teamId}/todos/{todoId}",
    response_model=None,
    responses={
        "401": {"model": ErrorResponsePayload},
        "403": {"model": ErrorResponsePayload},
        "404": {"model": ErrorResponsePayload},
    },
    tags=["Todo"],
)
def delete(
    team_id: str = Path(..., alias="teamId"), todo_id: float = Path(..., alias="todoId")
) -> Optional[ErrorResponsePayload]:
    """
    할 일 삭제
    """
    pass


@app.get(
    "/{teamId}/user",
    response_model=UserServiceResponseDto,
    responses={
        "401": {"model": ErrorResponsePayload},
        "404": {"model": ErrorResponsePayload},
    },
    tags=["User"],
)
def get(team_id: str = Path(..., alias="teamId")) -> Union[UserServiceResponseDto, ErrorResponsePayload]:
    """
    회원정보 조회
    """
    pass


@app.post(
    "/{teamId}/user",
    response_model=None,
    responses={
        "201": {"model": UserServiceResponseDto},
        "400": {"model": ErrorResponsePayload},
        "409": {"model": ErrorResponsePayload},
    },
    tags=["User"],
)
def create(
    team_id: str = Path(..., alias="teamId"), body: UserCreateRequstDto = ...
) -> Optional[Union[UserServiceResponseDto, ErrorResponsePayload]]:
    """
    회원가입
    """
    pass
