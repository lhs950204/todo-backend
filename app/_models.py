# generated by fastapi-codegen:
#   filename:  api.yaml
#   timestamp: 2025-01-12T04:41:14+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class UserServiceResponseDto(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: float
    email: str
    name: str
    createdAt: AwareDatetime
    updatedAt: AwareDatetime


class ErrorResponsePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    message: str


class LoginBodyDto(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    email: str
    password: str


class SortOrder(Enum):
    oldest = "oldest"
    newest = "newest"


class FindGoalsQuery(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    cursor: Optional[float] = None
    size: Optional[float] = 20
    sortOrder: Optional[SortOrder] = "oldest"


class CreateGoalBodyDto(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    title: str


class UpdateGoalBodyDto(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    title: str


class FindNotesQueryDto(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    goalId: Optional[float] = None
    cursor: Optional[float] = None
    size: Optional[float] = 20


class CreateNoteBodyDto(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    todoId: float
    title: str
    content: str
    linkUrl: Optional[str] = None


class UpdateNoteBodyDto(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    title: Optional[str] = None
    content: Optional[str] = None
    linkUrl: Optional[str] = None


class Goal(BaseModel):
    id: float
    title: str


class TodoResponseDto(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    noteId: float
    done: bool
    linkUrl: str
    fileUrl: str
    title: str
    id: float
    goal: Goal
    userId: float
    teamId: str
    updatedAt: AwareDatetime
    createdAt: AwareDatetime


class FindTodosQueryDto(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    goalId: Optional[float] = None
    done: Optional[bool] = Field(
        None,
        description="done이 true이면 완료된 todo만, false이면 미완료된 todo만 조회합니다. 아무것도 입력하지 않으면 모든 todo를 조회합니다.",
    )
    cursor: Optional[float] = None
    size: Optional[float] = 20


class GetProgressQueryDto(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    goalId: Optional[float] = None


class CreateTodoBodyDto(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    title: str
    fileUrl: Optional[str] = None
    linkUrl: Optional[str] = None
    goalId: Optional[float] = None


class UpdateTodoBodyDto(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    title: Optional[str] = None
    fileUrl: Optional[str] = None
    linkUrl: Optional[str] = None
    goalId: Optional[float] = None
    done: Optional[bool] = None


class UserCreateRequstDto(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    email: str
    name: str
    password: str


class FieldTeamIdAuthLoginPostResponse(BaseModel):
    user: UserServiceResponseDto
    refreshToken: str
    accessToken: str


class FieldTeamIdAuthTokensPostResponse(BaseModel):
    refreshToken: str
    accessToken: str


class FieldTeamIdFilesPostRequest(BaseModel):
    file: bytes


class FieldTeamIdFilesPostResponse(BaseModel):
    url: str


class Goal1(BaseModel):
    updatedAt: AwareDatetime
    createdAt: AwareDatetime
    title: str
    id: float
    userId: float
    teamId: str


class FieldTeamIdGoalsGetResponse(BaseModel):
    nextCursor: float
    totalCount: float
    goals: List[Goal1]


class FieldTeamIdGoalsPostResponse(BaseModel):
    updatedAt: AwareDatetime
    createdAt: AwareDatetime
    title: str
    id: float
    userId: float
    teamId: str


class FieldTeamIdGoalsGoalIdGetResponse(BaseModel):
    updatedAt: AwareDatetime
    createdAt: AwareDatetime
    title: str
    id: float
    userId: float
    teamId: str


class FieldTeamIdGoalsGoalIdPatchResponse(BaseModel):
    updatedAt: AwareDatetime
    createdAt: AwareDatetime
    title: str
    id: float
    userId: float
    teamId: str


class Todo(BaseModel):
    done: bool
    title: str
    id: float


class Goal2(BaseModel):
    title: str
    id: float


class Note(BaseModel):
    todo: Todo
    updatedAt: AwareDatetime
    createdAt: AwareDatetime
    title: str
    id: float
    goal: Goal2
    userId: float
    teamId: str


class FieldTeamIdNotesGetResponse(BaseModel):
    nextCursor: float
    totalCount: float
    notes: List[Note]


class Todo1(BaseModel):
    done: bool
    fileUrl: str
    linkUrl: str
    title: str
    id: float


class FieldTeamIdNotesPostResponse(BaseModel):
    todo: Todo1
    linkUrl: str
    content: str
    updatedAt: AwareDatetime
    createdAt: AwareDatetime
    title: str
    id: float
    goal: Goal2
    userId: float
    teamId: str


class FieldTeamIdNotesNoteIdGetResponse(BaseModel):
    todo: Todo1
    linkUrl: str
    content: str
    updatedAt: AwareDatetime
    createdAt: AwareDatetime
    title: str
    id: float
    goal: Goal2
    userId: float
    teamId: str


class FieldTeamIdNotesNoteIdPatchResponse(BaseModel):
    todo: Todo1
    linkUrl: str
    content: str
    updatedAt: AwareDatetime
    createdAt: AwareDatetime
    title: str
    id: float
    goal: Goal2
    userId: float
    teamId: str


class FieldTeamIdTodosGetResponse(BaseModel):
    totalCount: float
    nextCursor: float
    todos: List[TodoResponseDto]


class FieldTeamIdTodosProgressGetResponse(BaseModel):
    progress: float
